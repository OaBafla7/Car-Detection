import cv2
import math
import numpy as np


class EuclideanDistTracker:
    def __init__(self):
        self.center_points = {}
        self.id_count = 0
        self.max_distance = 50  # زيادة المسافة المسموح بها لمطابقة نفس السيارة

    def update(self, objects_rect):
        objects_bbs_ids = []

        for rect in objects_rect:
            x, y, w, h = rect
            cx = (x + x + w) // 2
            cy = (y + y + h) // 2

            same_object_detected = False
            for id, pt in self.center_points.items():
                dist = math.hypot(cx - pt[0], cy - pt[1])

                if dist < self.max_distance:
                    self.center_points[id] = (cx, cy)
                    objects_bbs_ids.append([x, y, w, h, id])
                    same_object_detected = True
                    break

            if not same_object_detected:
                self.center_points[self.id_count] = (cx, cy)
                objects_bbs_ids.append([x, y, w, h, self.id_count])
                self.id_count += 1

        # تنظيف النقاط القديمة
        new_center_points = {}
        for obj in objects_bbs_ids:
            _, _, _, _, obj_id = obj
            new_center_points[obj_id] = self.center_points[obj_id]

        self.center_points = new_center_points.copy()
        return objects_bbs_ids


# تهيئة المتتبع
tracker = EuclideanDistTracker()

# فتح ملف الفيديو
cap = cv2.VideoCapture("vid.mp4")

# كاشف الحركة مع إعدادات أكثر دقة
object_detector = cv2.createBackgroundSubtractorMOG2(history=200, varThreshold=60, detectShadows=False)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    height, width, _ = frame.shape

    # تحديد منطقة الاهتمام (ROI)
    roi = frame[340:720, 500:800]

    # تحسين الصورة قبل الكشف
    blurred = cv2.GaussianBlur(roi, (5, 5), 0)

    # 1. كشف الأجسام المتحركة
    mask = object_detector.apply(blurred)
    _, mask = cv2.threshold(mask, 254, 255, cv2.THRESH_BINARY)

    # تنظيف القناع
    kernel = np.ones((3, 3), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    detections = []

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 100:  # تجاهل المناطق الصغيرة
            x, y, w, h = cv2.boundingRect(cnt)

            # تصفية حسب نسبة الطول/العرض (للكشف عن السيارات فقط)
            aspect_ratio = float(w) / h
            if 0.5 < aspect_ratio < 3.0 and w > 30 and h > 30:
                detections.append([x, y, w, h])
                # رسم جميع الكشفيات باللون الأزرق (للتdebug)
                cv2.rectangle(roi, (x, y), (x + w, y + h), (255, 0, 0), 1)

    # 2. تتبع الأجسام
    boxes_ids = tracker.update(detections)
    for box_id in boxes_ids:
        x, y, w, h, id = box_id
        cv2.putText(roi, str(id), (x, y - 15), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0), 2)
        cv2.rectangle(roi, (x, y), (x + w, y + h), (0, 255, 0), 3)

    # عرض النتائج
    cv2.imshow("ROI", roi)
    cv2.imshow("Frame", frame)
    cv2.imshow("Mask", mask)

    key = cv2.waitKey(30)
    if key == 27:
        break

cap.release()
cv2.destroyAllWindows()